(()=>{"use strict";var e,t,r,n,o,i,a,s={555:(e,t,r)=>{r(177);const n=new class{save(e){localStorage.setItem("tasks",JSON.stringify(e))}load(){return localStorage.getItem("tasks")}},o=new class{constructor(){this.todoTasks=document.querySelector("#todo .item-tasks"),this.inProgressTasks=document.querySelector("#in-progress .item-tasks"),this.doneTasks=document.querySelector("#done .item-tasks")}addTask(e,t){const r=document.createElement("div");r.className="item-task",r.innerHTML=`\n        ${t}\n        <div class="del-task hidden">&#x2716;</div>\n      `,e.appendChild(r)}addArrTask(e,t){for(let r=0;r<t.length;r++)this.addTask(e,t[r])}initTasks(e){this.addArrTask(this.todoTasks,e.todo),this.addArrTask(this.inProgressTasks,e.inProgress),this.addArrTask(this.doneTasks,e.done)}},i=document.querySelector("#tasks");let a,s,d,c,l=null,u=null;function p(e,t){const r=document.elementFromPoint(e.clientX,e.clientY),{top:n}=r.getBoundingClientRect();r.classList.contains("item-task")?e.pageY>window.scrollY+n+r.offsetHeight/2?r.closest(".item-tasks").insertBefore(t,r.nextElementSibling):r.closest(".item-tasks").insertBefore(t,r):r.classList.contains("item-tasks")&&!r.querySelector(".item-task")&&r.append(t)}function f(){const e=document.querySelectorAll("#todo .item-tasks .item-task"),t=document.querySelectorAll("#in-progress .item-tasks .item-task"),r=document.querySelectorAll("#done .item-tasks .item-task"),o={todo:[],inProgress:[],done:[]};for(const t of e)o.todo.push(t.textContent.replace(" ✖",""));for(const e of t)o.inProgress.push(e.textContent.replace(" ✖",""));for(const e of r)o.done.push(e.textContent.replace(" ✖",""));n.save(o)}document.addEventListener("DOMContentLoaded",(()=>{const e=JSON.parse(n.load());null!==e&&o.initTasks(e)})),i.addEventListener("mousedown",(e=>{if(e.target.classList.contains("add-task"))e.target.parentNode.querySelector(".input-task").classList.remove("hidden"),e.target.classList.add("hidden");else if(e.target.classList.contains("btnRemoveTask"))e.target.closest(".col").querySelector(".add-task").classList.remove("hidden"),e.target.parentNode.classList.add("hidden");else if(e.target.classList.contains("btnAdTask")){const t=e.target.closest(".col").querySelector(".item-tasks"),r=e.target.closest(".input-task").querySelector("#text-task");o.addTask(t,r.value),r.value="",e.target.closest(".col").querySelector(".add-task").classList.remove("hidden"),e.target.parentNode.classList.add("hidden"),f()}else if(e.target.classList.contains("del-task")){const t=e.target.parentNode;t.parentNode.removeChild(t),f()}else if(e.target.classList.contains("item-task")){e.preventDefault(),e.target.querySelector(".del-task").classList.add("hidden");const{top:t,left:r}=e.target.getBoundingClientRect();l=e.target,a=l.offsetWidth,s=l.offsetHeight,c=e.pageX-r,d=e.pageY-t,u=e.target.cloneNode(!0),u.innerHTML="",u.style.backgroundColor="white",u.style.width=`${a}px`,u.style.height=`${s}px`,l.classList.add("dragged"),e.target.parentNode.insertBefore(u,e.target.nextElementSibling),l.style.backgroundColor="white",l.style.left=e.pageX-c+"px",l.style.top=e.pageY-d+"px",l.style.width=`${a}px`,l.style.height=`${s}px`}})),i.addEventListener("mousemove",(e=>{l&&(e.preventDefault(),p(e,u),l.style.left=e.pageX-c+"px",l.style.top=e.pageY-d+"px")})),i.addEventListener("mouseup",(e=>{l&&(p(e,l),u.parentNode.removeChild(u),l.classList.remove("dragged"),l.style="",u=null,l=null,f())}))},783:(e,t,r)=>{var n=r(618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function s(){}function d(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function c(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),s;var r,u,p=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=p(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return a.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(d(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void c();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),c())},50,u=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(u),u=setTimeout(n,50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,r)=>{var n=r(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},d={};function c(e){var t=d[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var r=d[e]={id:e,exports:{}};try{var n={id:e,module:r,factory:s[e],require:c};c.i.forEach((function(e){e(n)})),r=n.module,n.factory.call(r.exports,r,r.exports,n.require)}catch(e){throw r.error=e,e}return r.exports}c.m=s,c.c=d,c.i=[],c.hu=e=>e+"."+c.h()+".hot-update.js",c.miniCssF=e=>{},c.hmrF=()=>"main."+c.h()+".hot-update.json",c.h=()=>"0ce04cc2e8aa61e38a1e",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",c.l=(r,n,o,i)=>{if(e[r])e[r].push(n);else{var a,s;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+o){a=u;break}}a||(s=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,c.nc&&a.setAttribute("nonce",c.nc),a.setAttribute("data-webpack",t+o),a.src=r),e[r]=[n];var p=(t,n)=>{a.onerror=a.onload=null,clearTimeout(f);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),s&&document.head.appendChild(a)}},(()=>{var e,t,r,n,o={},i=c.c,a=[],s=[],d="idle";function l(e){d=e;for(var t=0;t<s.length;t++)s[t].call(null,e)}function u(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return u(e)}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return l("check"),c.hmrM().then((function(n){if(!n)return l(m()?"ready":"idle"),null;l("prepare");var o=[];return t=[],r=[],Promise.all(Object.keys(c.hmrC).reduce((function(e,t){return c.hmrC[t](n.c,n.r,n.m,e,r,o),e}),[])).then((function(){return u((function(){return e?h(e):(l("ready"),o)}))}))}))}function f(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},m();var t=r.map((function(t){return t(e)}));r=void 0;var o,i=t.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var a=function(e){o||(o=e)},s=[];return t.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var r=0;r<t.length;r++)s.push(t[r])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):n?h(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(l("idle"),Promise.resolve(s))}function m(){if(n)return r||(r=[]),Object.keys(c.hmrI).forEach((function(e){n.forEach((function(t){c.hmrI[e](t,r)}))})),n=void 0,!0}c.hmrD=o,c.i.push((function(h){var m,v,g,y=h.module,k=function(r,n){var o=i[n];if(!o)return r;var s=function(t){if(o.hot.active){if(i[t]){var s=i[t].parents;-1===s.indexOf(n)&&s.push(n)}else a=[n],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),a=[];return r(t)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var p in r)Object.prototype.hasOwnProperty.call(r,p)&&"e"!==p&&Object.defineProperty(s,p,c(p));return s.e=function(e){return function(e){switch(d){case"ready":return l("prepare"),t.push(e),u((function(){l("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},s}(h.require,h.id);y.hot=(m=h.id,v=y,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==m,_requireSelf:function(){a=v.parents.slice(),e=m,c(m)},active:!0,accept:function(e,t,r){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._acceptedDependencies[e[n]]=t||function(){},g._acceptedErrorHandlers[e[n]]=r;else g._acceptedDependencies[e]=t||function(){},g._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._declinedDependencies[e[t]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=g._disposeHandlers.indexOf(e);t>=0&&g._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":r=[],Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,r)})),l("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(e){c.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return d;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:o[m]},e=void 0,g),y.parents=a,y.children=[],a=[],h.require=k})),c.hmrC={},c.hmrI={}})(),(()=>{var e;c.g.importScripts&&(e=c.g.location+"");var t=c.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=e})(),r=(e,t,r,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)r();else{var a=i&&("load"===i.type?"missing":i.type),s=i&&i.target&&i.target.href||t,d=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=a,d.request=s,o.parentNode.removeChild(o),n(d)}},o.href=t,document.head.appendChild(o),o},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(a=r[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===t))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===t)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),c.hmrC.miniCss=(e,t,s,d,l,u)=>{l.push(a),e.forEach((e=>{var t=c.miniCssF(e),a=c.p+t;const s=n(t,a);s&&d.push(new Promise(((t,n)=>{var d=r(e,a,(()=>{d.as="style",d.rel="preload",t()}),n);o.push(s),i.push(d)})))}))},(()=>{var e,t,r,n,o={179:0},i={};function a(e){return new Promise(((t,r)=>{i[e]=t;var n=c.p+c.hu(e),o=new Error;c.l(n,(t=>{if(i[e]){i[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,r(o)}}))}))}function s(i){function a(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,a=o.chain,d=c.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],p=c.c[u];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(p.hot._acceptedDependencies[i]?(r[u]||(r[u]=[]),s(r[u],[i])):(delete r[u],t.push(u),n.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}c.f&&delete c.f.jsonpHmr,e=void 0;var d={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in t)if(c.o(t,f)){var h,m=t[f],v=!1,g=!1,y=!1,k="";switch((h=m?a(f):{type:"disposed",moduleId:f}).chain&&(k="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+k));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+k));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(v=new Error("Aborted because "+f+" is not accepted"+k));break;case"accepted":i.onAccepted&&i.onAccepted(h),g=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(g)for(f in u[f]=m,s(l,h.outdatedModules),h.outdatedDependencies)c.o(h.outdatedDependencies,f)&&(d[f]||(d[f]=[]),s(d[f],h.outdatedDependencies[f]));y&&(s(l,[h.moduleId]),u[f]=p)}t=void 0;for(var E,w=[],b=0;b<l.length;b++){var x=l[b],S=c.c[x];S&&S.hot._selfAccepted&&u[x]!==p&&!S.hot._selfInvalidated&&w.push({module:x,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var i=n.pop(),a=c.c[i];if(a){var s={},u=a.hot._disposeHandlers;for(b=0;b<u.length;b++)u[b].call(null,s);for(c.hmrD[i]=s,a.hot.active=!1,delete c.c[i],delete d[i],b=0;b<a.children.length;b++){var p=c.c[a.children[b]];p&&(e=p.parents.indexOf(i))>=0&&p.parents.splice(e,1)}}}for(var f in d)if(c.o(d,f)&&(a=c.c[f]))for(E=d[f],b=0;b<E.length;b++)t=E[b],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(e){for(var t in u)c.o(u,t)&&(c.m[t]=u[t]);for(var r=0;r<n.length;r++)n[r](c);for(var o in d)if(c.o(d,o)){var a=c.c[o];if(a){E=d[o];for(var s=[],p=[],f=[],h=0;h<E.length;h++){var m=E[h],v=a.hot._acceptedDependencies[m],g=a.hot._acceptedErrorHandlers[m];if(v){if(-1!==s.indexOf(v))continue;s.push(v),p.push(g),f.push(m)}}for(var y=0;y<s.length;y++)try{s[y].call(null,E)}catch(t){if("function"==typeof p[y])try{p[y](t,{moduleId:o,dependencyId:f[y]})}catch(r){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:f[y],error:r,originalError:t}),i.ignoreErrored||(e(r),e(t))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:f[y],error:t}),i.ignoreErrored||e(t)}}}for(var k=0;k<w.length;k++){var b=w[k],x=b.module;try{b.require(x)}catch(t){if("function"==typeof b.errorHandler)try{b.errorHandler(t,{moduleId:x,module:c.c[x]})}catch(r){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:r,originalError:t}),i.ignoreErrored||(e(r),e(t))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:x,error:t}),i.ignoreErrored||e(t)}}return l}}}self.webpackHotUpdateajs=(e,r,o)=>{for(var a in r)c.o(r,a)&&(t[a]=r[a]);o&&n.push(o),i[e]&&(i[e](),i[e]=void 0)},c.hmrI.jsonp=function(e,o){t||(t={},n=[],r=[],o.push(s)),c.o(t,e)||(t[e]=c.m[e])},c.hmrC.jsonp=function(i,d,l,u,p,f){p.push(s),e={},r=d,t=l.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],i.forEach((function(t){c.o(o,t)&&void 0!==o[t]&&(u.push(a(t)),e[t]=!0)})),c.f&&(c.f.jsonpHmr=function(t,r){e&&!c.o(e,t)&&c.o(o,t)&&void 0!==o[t]&&(r.push(a(t)),e[t]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),c(555)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,